definitions:
  rest.Response:
    properties:
      data: {}
      error: {}
    type: object
  types.Error:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  types.ID:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - ZeroID
  user.User:
    properties:
      document:
        type: string
      id:
        $ref: '#/definitions/types.ID'
      name:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
  title: GOVOBS - Golang Volunteasy Backend Service
  version: "1.0"
paths:
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Checks if all the inputs creates a valid user. Also validates if
        there is already an account with the given document
      parameters:
      - description: User data to be validated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "412":
          description: Precondition Failed
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
      summary: Validate user input
      tags:
      - User
  /api/v1/users/{userID}:
    get:
      description: Gets an user by their unique ID
      parameters:
      - description: The user ID. Same provided by cognito API
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.User'
              type: object
        "400":
          description: In case the ID sent is invalid
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/rest.Response'
            - properties:
                error:
                  $ref: '#/definitions/types.Error'
              type: object
      summary: Get user
      tags:
      - User
securityDefinitions:
  AuthKey:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
