@page "/fetchdata"
@using Volunteasy.Core.Model
@using Volunteasy.Core.Services
@using Volunteasy.Core.DTOs
@using Microsoft.AspNetCore.Mvc
@inject IOrganizationService Organizations

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (organizations == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var organization in organizations)
        {
            <tr>
                <td>@organization.Name</td>
                <td>@($"{organization.Address.AddressName}, {organization.Address.AddressNumber}")</td>
                <td>@organization.PhoneNumber</td>
                <td>@organization.Id</td>
            </tr>
        }
        </tbody>
        <tfoot>
        <button disabled="@HasNotNext" onclick="@ListOrganizations">Página anterior</button>
        <button disabled="@HasNotPrevious" onclick="@ListOrganizations">Próxima página</button>
        </tfoot>
    </table>
}

@code {
    private IEnumerable<OrganizationDetails>? organizations;

    public long Next;

    public long Previous;

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public long Page { get; set; }

    private bool HasNotNext => Next == 0;

    private bool HasNotPrevious => Previous == 0;

    protected override async Task OnInitializedAsync()
    {

        await ListOrganizations();

    }

    private async Task ListOrganizations()
    {
        Previous = Page;
        
        (organizations, var pgtok) = await Organizations.ListOrganizations(new OrganizationFilter { }, Page);
        if (pgtok != null)
            Next = Convert.ToInt64(pgtok);
    }

}